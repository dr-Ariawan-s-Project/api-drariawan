// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	dashboard "github.com/dr-ariawan-s-project/api-drariawan/features/dashboard"
	mock "github.com/stretchr/testify/mock"
)

// DashboardData is an autogenerated mock type for the DashboardDataInterface type
type DashboardData struct {
	mock.Mock
}

// CountAllPatient provides a mock function with given fields:
func (_m *DashboardData) CountAllPatient() (int, error) {
	ret := _m.Called()

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountAttemptByMonth provides a mock function with given fields: month
func (_m *DashboardData) CountAttemptByMonth(month int) (int, error) {
	ret := _m.Called(month)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (int, error)); ok {
		return rf(month)
	}
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(month)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(month)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountAttemptByStatusAssessment provides a mock function with given fields: status
func (_m *DashboardData) CountAttemptByStatusAssessment(status string) (int, error) {
	ret := _m.Called(status)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(status)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(status)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountQuestionerAttempt provides a mock function with given fields:
func (_m *DashboardData) CountQuestionerAttempt() (int, error) {
	ret := _m.Called()

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountQuestionerAttemptPerMonth provides a mock function with given fields:
func (_m *DashboardData) CountQuestionerAttemptPerMonth() ([]dashboard.DashboardAttemptCore, error) {
	ret := _m.Called()

	var r0 []dashboard.DashboardAttemptCore
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]dashboard.DashboardAttemptCore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []dashboard.DashboardAttemptCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dashboard.DashboardAttemptCore)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDashboardData interface {
	mock.TestingT
	Cleanup(func())
}

// NewDashboardData creates a new instance of DashboardData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDashboardData(t mockConstructorTestingTNewDashboardData) *DashboardData {
	mock := &DashboardData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
