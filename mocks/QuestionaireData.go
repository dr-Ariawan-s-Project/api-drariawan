// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	questionaire "github.com/dr-ariawan-s-project/api-drariawan/features/questionaire"
	mock "github.com/stretchr/testify/mock"
)

// QuestionaireData is an autogenerated mock type for the QuestionaireDataInterface type
type QuestionaireData struct {
	mock.Mock
}

// InsertAnswer provides a mock function with given fields: idAttempt, data
func (_m *QuestionaireData) InsertAnswer(idAttempt string, data []questionaire.CoreAnswer) error {
	ret := _m.Called(idAttempt, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []questionaire.CoreAnswer) error); ok {
		r0 = rf(idAttempt, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAll provides a mock function with given fields:
func (_m *QuestionaireData) SelectAll() ([]questionaire.Core, error) {
	ret := _m.Called()

	var r0 []questionaire.Core
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]questionaire.Core, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []questionaire.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]questionaire.Core)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewQuestionaireData interface {
	mock.TestingT
	Cleanup(func())
}

// NewQuestionaireData creates a new instance of QuestionaireData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQuestionaireData(t mockConstructorTestingTNewQuestionaireData) *QuestionaireData {
	mock := &QuestionaireData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
