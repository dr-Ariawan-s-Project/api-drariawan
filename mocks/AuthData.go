// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	auth "github.com/dr-ariawan-s-project/api-drariawan/features/auth"
	mock "github.com/stretchr/testify/mock"
)

// AuthData is an autogenerated mock type for the AuthDataInterface type
type AuthData struct {
	mock.Mock
}

// CreateToken provides a mock function with given fields: id, role
func (_m *AuthData) CreateToken(id interface{}, role string) (string, error) {
	ret := _m.Called(id, role)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, string) (string, error)); ok {
		return rf(id, role)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string) string); ok {
		r0 = rf(id, role)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(interface{}, string) error); ok {
		r1 = rf(id, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPatientByEmail provides a mock function with given fields: email
func (_m *AuthData) GetPatientByEmail(email string) (*auth.PatientCore, error) {
	ret := _m.Called(email)

	var r0 *auth.PatientCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*auth.PatientCore, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *auth.PatientCore); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.PatientCore)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *AuthData) GetUserByEmail(email string) (*auth.UserCore, error) {
	ret := _m.Called(email)

	var r0 *auth.UserCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*auth.UserCore, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *auth.UserCore); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.UserCore)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthData interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthData creates a new instance of AuthData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthData(t mockConstructorTestingTNewAuthData) *AuthData {
	mock := &AuthData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
