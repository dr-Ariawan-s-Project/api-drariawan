// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	patient "github.com/dr-ariawan-s-project/api-drariawan/features/patient"
	mock "github.com/stretchr/testify/mock"
)

// PatientService is an autogenerated mock type for the PatientServiceInterface type
type PatientService struct {
	mock.Mock
}

// CheckByEmailAndPhone provides a mock function with given fields: email, phone
func (_m *PatientService) CheckByEmailAndPhone(email string, phone string) (*patient.Core, error) {
	ret := _m.Called(email, phone)

	var r0 *patient.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*patient.Core, error)); ok {
		return rf(email, phone)
	}
	if rf, ok := ret.Get(0).(func(string, string) *patient.Core); ok {
		r0 = rf(email, phone)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*patient.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, phone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountAllPatient provides a mock function with given fields:
func (_m *PatientService) CountAllPatient() (int, error) {
	ret := _m.Called()

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountPartner provides a mock function with given fields: partnerId
func (_m *PatientService) CountPartner(partnerId string) (int, error) {
	ret := _m.Called(partnerId)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(partnerId)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(partnerId)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(partnerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *PatientService) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: search, page, perPage
func (_m *PatientService) FindAll(search string, page int, perPage int) ([]patient.Core, error) {
	ret := _m.Called(search, page, perPage)

	var r0 []patient.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]patient.Core, error)); ok {
		return rf(search, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []patient.Core); ok {
		r0 = rf(search, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]patient.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(search, page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *PatientService) FindById(id string) (*patient.Core, error) {
	ret := _m.Called(id)

	var r0 *patient.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*patient.Core, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *patient.Core); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*patient.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: data, partnerEmail
func (_m *PatientService) Insert(data patient.Core, partnerEmail string) (*patient.Core, error) {
	ret := _m.Called(data, partnerEmail)

	var r0 *patient.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(patient.Core, string) (*patient.Core, error)); ok {
		return rf(data, partnerEmail)
	}
	if rf, ok := ret.Get(0).(func(patient.Core, string) *patient.Core); ok {
		r0 = rf(data, partnerEmail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*patient.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(patient.Core, string) error); ok {
		r1 = rf(data, partnerEmail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: data
func (_m *PatientService) Update(data patient.Core) (*patient.Core, error) {
	ret := _m.Called(data)

	var r0 *patient.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(patient.Core) (*patient.Core, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(patient.Core) *patient.Core); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*patient.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(patient.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPatientService interface {
	mock.TestingT
	Cleanup(func())
}

// NewPatientService creates a new instance of PatientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPatientService(t mockConstructorTestingTNewPatientService) *PatientService {
	mock := &PatientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
